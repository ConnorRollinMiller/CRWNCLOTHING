{"ast":null,"code":"import _slicedToArray from \"/Users/connormiller/Projects/Web/clothingstoreapp/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/connormiller/Projects/Web/clothingstoreapp/src/pages/shop/ShopPage.js\";\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport CollectionsOverview from '../../components/collections-overview/CollectionsOverview';\nimport CollectionPage from '../collection/CollectionPage';\nimport WithSpinner from '../../components/WithSpinner/WithSpinner';\nimport { fetchCollectionsStartAsync } from '../../redux/actions/shopActions';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/utils';\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nconst ShopPage = ({\n  match,\n  updateCollections\n}) => {\n  const _useState = useState(true),\n        _useState2 = _slicedToArray(_useState, 2),\n        isLoading = _useState2[0],\n        setIsLoading = _useState2[1];\n\n  useEffect(() => {\n    fetchCollectionsStartAsync();\n  }, []);\n  return React.createElement(\"main\", {\n    className: \"shop-page\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, React.createElement(Route, {\n    exact: true,\n    path: \"\".concat(match.path),\n    render: props => React.createElement(CollectionsOverviewWithSpinner, Object.assign({\n      isLoading: isLoading\n    }, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }), React.createElement(Route, {\n    path: \"\".concat(match.path, \"/:collectionId\"),\n    render: props => React.createElement(CollectionPageWithSpinner, Object.assign({\n      isLoading: isLoading\n    }, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }));\n};\n\nShopPage.propTypes = {\n  match: PropTypes.object.isRequired,\n  updateCollections: PropTypes.func.isRequired\n};\n\nconst mapDispatchToProps = dispatch => ({\n  updateCollections: collectionsMap => dispatch(updateCollections(collectionsMap))\n});\n\nexport default connect(null, mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["/Users/connormiller/Projects/Web/clothingstoreapp/src/pages/shop/ShopPage.js"],"names":["React","useEffect","useState","PropTypes","Route","connect","CollectionsOverview","CollectionPage","WithSpinner","fetchCollectionsStartAsync","firestore","convertCollectionsSnapshotToMap","CollectionsOverviewWithSpinner","CollectionPageWithSpinner","ShopPage","match","updateCollections","isLoading","setIsLoading","path","props","propTypes","object","isRequired","func","mapDispatchToProps","dispatch","collectionsMap"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAOC,mBAAP,MAAgC,2DAAhC;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AACA,OAAOC,WAAP,MAAwB,0CAAxB;AAEA,SAASC,0BAAT,QAA2C,iCAA3C;AAEA,SACGC,SADH,EAEGC,+BAFH,QAGO,sBAHP;AAKA,MAAMC,8BAA8B,GAAGJ,WAAW,CAACF,mBAAD,CAAlD;AACA,MAAMO,yBAAyB,GAAGL,WAAW,CAACD,cAAD,CAA7C;;AAEA,MAAMO,QAAQ,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAAkC;AAAA,oBACdd,QAAQ,CAAC,IAAD,CADM;AAAA;AAAA,QACzCe,SADyC;AAAA,QAC9BC,YAD8B;;AAGhDjB,EAAAA,SAAS,CAAC,MAAM;AACbQ,IAAAA,0BAA0B;AAC5B,GAFQ,EAEN,EAFM,CAAT;AAIA,SACG;AAAM,IAAA,SAAS,EAAC,WAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,oBAAC,KAAD;AACG,IAAA,KAAK,MADR;AAEG,IAAA,IAAI,YAAKM,KAAK,CAACI,IAAX,CAFP;AAGG,IAAA,MAAM,EAAEC,KAAK,IACV,oBAAC,8BAAD;AACG,MAAA,SAAS,EAAEH;AADd,OAEOG,KAFP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAJN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH,EAWG,oBAAC,KAAD;AACG,IAAA,IAAI,YAAKL,KAAK,CAACI,IAAX,mBADP;AAEG,IAAA,MAAM,EAAEC,KAAK,IACV,oBAAC,yBAAD;AAA2B,MAAA,SAAS,EAAEH;AAAtC,OAAqDG,KAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAHN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXH,CADH;AAoBF,CA3BD;;AA6BAN,QAAQ,CAACO,SAAT,GAAqB;AAClBN,EAAAA,KAAK,EAAEZ,SAAS,CAACmB,MAAV,CAAiBC,UADN;AAElBP,EAAAA,iBAAiB,EAAEb,SAAS,CAACqB,IAAV,CAAeD;AAFhB,CAArB;;AAKA,MAAME,kBAAkB,GAAGC,QAAQ,KAAK;AACrCV,EAAAA,iBAAiB,EAAEW,cAAc,IAC9BD,QAAQ,CAACV,iBAAiB,CAACW,cAAD,CAAlB;AAF0B,CAAL,CAAnC;;AAKA,eAAetB,OAAO,CAAC,IAAD,EAAOoB,kBAAP,CAAP,CAAkCX,QAAlC,CAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport CollectionsOverview from '../../components/collections-overview/CollectionsOverview';\nimport CollectionPage from '../collection/CollectionPage';\nimport WithSpinner from '../../components/WithSpinner/WithSpinner';\n\nimport { fetchCollectionsStartAsync } from '../../redux/actions/shopActions';\n\nimport {\n   firestore,\n   convertCollectionsSnapshotToMap\n} from '../../firebase/utils';\n\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nconst ShopPage = ({ match, updateCollections }) => {\n   const [isLoading, setIsLoading] = useState(true);\n\n   useEffect(() => {\n      fetchCollectionsStartAsync();\n   }, []);\n\n   return (\n      <main className='shop-page'>\n         <Route\n            exact\n            path={`${match.path}`}\n            render={props => (\n               <CollectionsOverviewWithSpinner\n                  isLoading={isLoading}\n                  {...props}\n               />\n            )}\n         />\n         <Route\n            path={`${match.path}/:collectionId`}\n            render={props => (\n               <CollectionPageWithSpinner isLoading={isLoading} {...props} />\n            )}\n         />\n      </main>\n   );\n};\n\nShopPage.propTypes = {\n   match: PropTypes.object.isRequired,\n   updateCollections: PropTypes.func.isRequired\n};\n\nconst mapDispatchToProps = dispatch => ({\n   updateCollections: collectionsMap =>\n      dispatch(updateCollections(collectionsMap))\n});\n\nexport default connect(null, mapDispatchToProps)(ShopPage);\n"]},"metadata":{},"sourceType":"module"}