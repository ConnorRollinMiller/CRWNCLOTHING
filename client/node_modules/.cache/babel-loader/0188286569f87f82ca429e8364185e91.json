{"ast":null,"code":"import _slicedToArray from \"/Users/connormiller/Projects/Web/clothingstoreapp/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/connormiller/Projects/Web/clothingstoreapp/src/pages/shop/ShopPage.js\";\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport CollectionsOverview from '../../components/collections-overview/CollectionsOverview';\nimport CollectionPage from '../collection/CollectionPage';\nimport WithSpinner from '../../components/WithSpinner/WithSpinner';\nimport { updateCollections } from '../../redux/actions/shopActions';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/utils';\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nconst ShopPage = ({\n  match,\n  updateCollections\n}) => {\n  const _useState = useState(true),\n        _useState2 = _slicedToArray(_useState, 2),\n        isLoading = _useState2[0],\n        setIsLoading = _useState2[1];\n\n  useEffect(() => {\n    let unsubscribeFromSnapshop = null;\n    const collectionRef = firestore.collection('collections');\n    fetch('https://firestore.googleapis.com/v1/projects/crwn-db-f85b1/databases/(default)/documents/collections').then(res => res.json()).then(collections => console.log(collections)); // unsubscribeFromSnapshop = collectionRef.onSnapshot(async snapshot => {\n    //    const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n    //    updateCollections(collectionsMap);\n    //    setIsLoading(false);\n    // });\n\n    return () => {\n      unsubscribeFromSnapshop();\n    };\n  }, [updateCollections]);\n  return React.createElement(\"main\", {\n    className: \"shop-page\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, React.createElement(Route, {\n    exact: true,\n    path: \"\".concat(match.path),\n    render: props => React.createElement(CollectionsOverviewWithSpinner, Object.assign({\n      isLoading: isLoading\n    }, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }), React.createElement(Route, {\n    path: \"\".concat(match.path, \"/:collectionId\"),\n    render: props => React.createElement(CollectionPageWithSpinner, Object.assign({\n      isLoading: isLoading\n    }, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }));\n};\n\nShopPage.propTypes = {\n  match: PropTypes.object.isRequired,\n  updateCollections: PropTypes.func.isRequired\n};\n\nconst mapDispatchToProps = dispatch => ({\n  updateCollections: collectionsMap => dispatch(updateCollections(collectionsMap))\n});\n\nexport default connect(null, mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["/Users/connormiller/Projects/Web/clothingstoreapp/src/pages/shop/ShopPage.js"],"names":["React","useEffect","useState","PropTypes","Route","connect","CollectionsOverview","CollectionPage","WithSpinner","updateCollections","firestore","convertCollectionsSnapshotToMap","CollectionsOverviewWithSpinner","CollectionPageWithSpinner","ShopPage","match","isLoading","setIsLoading","unsubscribeFromSnapshop","collectionRef","collection","fetch","then","res","json","collections","console","log","path","props","propTypes","object","isRequired","func","mapDispatchToProps","dispatch","collectionsMap"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAOC,mBAAP,MAAgC,2DAAhC;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AACA,OAAOC,WAAP,MAAwB,0CAAxB;AAEA,SAASC,iBAAT,QAAkC,iCAAlC;AAEA,SACGC,SADH,EAEGC,+BAFH,QAGO,sBAHP;AAKA,MAAMC,8BAA8B,GAAGJ,WAAW,CAACF,mBAAD,CAAlD;AACA,MAAMO,yBAAyB,GAAGL,WAAW,CAACD,cAAD,CAA7C;;AAEA,MAAMO,QAAQ,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASN,EAAAA;AAAT,CAAD,KAAkC;AAAA,oBACdP,QAAQ,CAAC,IAAD,CADM;AAAA;AAAA,QACzCc,SADyC;AAAA,QAC9BC,YAD8B;;AAGhDhB,EAAAA,SAAS,CAAC,MAAM;AACb,QAAIiB,uBAAuB,GAAG,IAA9B;AAEA,UAAMC,aAAa,GAAGT,SAAS,CAACU,UAAV,CAAqB,aAArB,CAAtB;AAEAC,IAAAA,KAAK,CACF,sGADE,CAAL,CAGIC,IAHJ,CAGSC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAHhB,EAIIF,IAJJ,CAISG,WAAW,IAAIC,OAAO,CAACC,GAAR,CAAYF,WAAZ,CAJxB,EALa,CAWb;AACA;AAEA;AACA;AACA;;AAEA,WAAO,MAAM;AACVP,MAAAA,uBAAuB;AACzB,KAFD;AAGF,GArBQ,EAqBN,CAACT,iBAAD,CArBM,CAAT;AAuBA,SACG;AAAM,IAAA,SAAS,EAAC,WAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,oBAAC,KAAD;AACG,IAAA,KAAK,MADR;AAEG,IAAA,IAAI,YAAKM,KAAK,CAACa,IAAX,CAFP;AAGG,IAAA,MAAM,EAAEC,KAAK,IACV,oBAAC,8BAAD;AACG,MAAA,SAAS,EAAEb;AADd,OAEOa,KAFP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAJN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH,EAWG,oBAAC,KAAD;AACG,IAAA,IAAI,YAAKd,KAAK,CAACa,IAAX,mBADP;AAEG,IAAA,MAAM,EAAEC,KAAK,IACV,oBAAC,yBAAD;AAA2B,MAAA,SAAS,EAAEb;AAAtC,OAAqDa,KAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAHN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXH,CADH;AAoBF,CA9CD;;AAgDAf,QAAQ,CAACgB,SAAT,GAAqB;AAClBf,EAAAA,KAAK,EAAEZ,SAAS,CAAC4B,MAAV,CAAiBC,UADN;AAElBvB,EAAAA,iBAAiB,EAAEN,SAAS,CAAC8B,IAAV,CAAeD;AAFhB,CAArB;;AAKA,MAAME,kBAAkB,GAAGC,QAAQ,KAAK;AACrC1B,EAAAA,iBAAiB,EAAE2B,cAAc,IAC9BD,QAAQ,CAAC1B,iBAAiB,CAAC2B,cAAD,CAAlB;AAF0B,CAAL,CAAnC;;AAKA,eAAe/B,OAAO,CAAC,IAAD,EAAO6B,kBAAP,CAAP,CAAkCpB,QAAlC,CAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport CollectionsOverview from '../../components/collections-overview/CollectionsOverview';\nimport CollectionPage from '../collection/CollectionPage';\nimport WithSpinner from '../../components/WithSpinner/WithSpinner';\n\nimport { updateCollections } from '../../redux/actions/shopActions';\n\nimport {\n   firestore,\n   convertCollectionsSnapshotToMap\n} from '../../firebase/utils';\n\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nconst ShopPage = ({ match, updateCollections }) => {\n   const [isLoading, setIsLoading] = useState(true);\n\n   useEffect(() => {\n      let unsubscribeFromSnapshop = null;\n\n      const collectionRef = firestore.collection('collections');\n\n      fetch(\n         'https://firestore.googleapis.com/v1/projects/crwn-db-f85b1/databases/(default)/documents/collections'\n      )\n         .then(res => res.json())\n         .then(collections => console.log(collections));\n\n      // unsubscribeFromSnapshop = collectionRef.onSnapshot(async snapshot => {\n      //    const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n\n      //    updateCollections(collectionsMap);\n      //    setIsLoading(false);\n      // });\n\n      return () => {\n         unsubscribeFromSnapshop();\n      };\n   }, [updateCollections]);\n\n   return (\n      <main className='shop-page'>\n         <Route\n            exact\n            path={`${match.path}`}\n            render={props => (\n               <CollectionsOverviewWithSpinner\n                  isLoading={isLoading}\n                  {...props}\n               />\n            )}\n         />\n         <Route\n            path={`${match.path}/:collectionId`}\n            render={props => (\n               <CollectionPageWithSpinner isLoading={isLoading} {...props} />\n            )}\n         />\n      </main>\n   );\n};\n\nShopPage.propTypes = {\n   match: PropTypes.object.isRequired,\n   updateCollections: PropTypes.func.isRequired\n};\n\nconst mapDispatchToProps = dispatch => ({\n   updateCollections: collectionsMap =>\n      dispatch(updateCollections(collectionsMap))\n});\n\nexport default connect(null, mapDispatchToProps)(ShopPage);\n"]},"metadata":{},"sourceType":"module"}