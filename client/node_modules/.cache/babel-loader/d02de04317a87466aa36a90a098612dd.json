{"ast":null,"code":"var _jsxFileName = \"/Users/connormiller/Projects/Web/clothingstoreapp/src/pages/shop/ShopPage.js\";\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport CollectionsOverview from '../../components/collections-overview/CollectionsOverview';\nimport CollectionPage from '../collection/CollectionPage';\nimport WithSpinner from '../../components/WithSpinner/WithSpinner';\nimport { updateCollections } from '../../redux/actions/shopActions';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/utils';\n\nconst ShopPage = ({\n  match,\n  updateCollections\n}) => {\n  useEffect(() => {\n    let unsubscribeFromSnapshop = null;\n    const collectionRef = firestore.collection('collections');\n    unsubscribeFromSnapshop = collectionRef.onSnapshot(async snapshot => {\n      const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n      updateCollections(collectionsMap);\n    });\n    return () => {\n      unsubscribeFromSnapshop();\n    };\n  }, [updateCollections]);\n  return React.createElement(\"main\", {\n    className: \"shop-page\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, React.createElement(Route, {\n    exact: true,\n    path: \"\".concat(match.path),\n    component: CollectionsOverview,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }), React.createElement(Route, {\n    path: \"\".concat(match.path, \"/:collectionId\"),\n    component: CollectionPage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }));\n};\n\nShopPage.propTypes = {\n  match: PropTypes.object.isRequired,\n  updateCollections: PropTypes.func.isRequired\n};\n\nconst mapDispatchToProps = dispatch => ({\n  updateCollections: collectionsMap => dispatch(updateCollections(collectionsMap))\n});\n\nexport default connect(null, mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["/Users/connormiller/Projects/Web/clothingstoreapp/src/pages/shop/ShopPage.js"],"names":["React","useEffect","PropTypes","Route","connect","CollectionsOverview","CollectionPage","WithSpinner","updateCollections","firestore","convertCollectionsSnapshotToMap","ShopPage","match","unsubscribeFromSnapshop","collectionRef","collection","onSnapshot","snapshot","collectionsMap","path","propTypes","object","isRequired","func","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAOC,mBAAP,MAAgC,2DAAhC;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AACA,OAAOC,WAAP,MAAwB,0CAAxB;AAEA,SAASC,iBAAT,QAAkC,iCAAlC;AAEA,SACGC,SADH,EAEGC,+BAFH,QAGO,sBAHP;;AAKA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASJ,EAAAA;AAAT,CAAD,KAAkC;AAChDP,EAAAA,SAAS,CAAC,MAAM;AACb,QAAIY,uBAAuB,GAAG,IAA9B;AAEA,UAAMC,aAAa,GAAGL,SAAS,CAACM,UAAV,CAAqB,aAArB,CAAtB;AAEAF,IAAAA,uBAAuB,GAAGC,aAAa,CAACE,UAAd,CAAyB,MAAMC,QAAN,IAAkB;AAClE,YAAMC,cAAc,GAAGR,+BAA+B,CAACO,QAAD,CAAtD;AAEAT,MAAAA,iBAAiB,CAACU,cAAD,CAAjB;AACF,KAJyB,CAA1B;AAMA,WAAO,MAAM;AACVL,MAAAA,uBAAuB;AACzB,KAFD;AAGF,GAdQ,EAcN,CAACL,iBAAD,CAdM,CAAT;AAgBA,SACG;AAAM,IAAA,SAAS,EAAC,WAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,oBAAC,KAAD;AAAO,IAAA,KAAK,MAAZ;AAAa,IAAA,IAAI,YAAKI,KAAK,CAACO,IAAX,CAAjB;AAAoC,IAAA,SAAS,EAAEd,mBAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH,EAEG,oBAAC,KAAD;AACG,IAAA,IAAI,YAAKO,KAAK,CAACO,IAAX,mBADP;AAEG,IAAA,SAAS,EAAEb,cAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFH,CADH;AASF,CA1BD;;AA4BAK,QAAQ,CAACS,SAAT,GAAqB;AAClBR,EAAAA,KAAK,EAAEV,SAAS,CAACmB,MAAV,CAAiBC,UADN;AAElBd,EAAAA,iBAAiB,EAAEN,SAAS,CAACqB,IAAV,CAAeD;AAFhB,CAArB;;AAKA,MAAME,kBAAkB,GAAGC,QAAQ,KAAK;AACrCjB,EAAAA,iBAAiB,EAAEU,cAAc,IAC9BO,QAAQ,CAACjB,iBAAiB,CAACU,cAAD,CAAlB;AAF0B,CAAL,CAAnC;;AAKA,eAAed,OAAO,CAAC,IAAD,EAAOoB,kBAAP,CAAP,CAAkCb,QAAlC,CAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport CollectionsOverview from '../../components/collections-overview/CollectionsOverview';\nimport CollectionPage from '../collection/CollectionPage';\nimport WithSpinner from '../../components/WithSpinner/WithSpinner';\n\nimport { updateCollections } from '../../redux/actions/shopActions';\n\nimport {\n   firestore,\n   convertCollectionsSnapshotToMap\n} from '../../firebase/utils';\n\nconst ShopPage = ({ match, updateCollections }) => {\n   useEffect(() => {\n      let unsubscribeFromSnapshop = null;\n\n      const collectionRef = firestore.collection('collections');\n\n      unsubscribeFromSnapshop = collectionRef.onSnapshot(async snapshot => {\n         const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n\n         updateCollections(collectionsMap);\n      });\n\n      return () => {\n         unsubscribeFromSnapshop();\n      };\n   }, [updateCollections]);\n\n   return (\n      <main className='shop-page'>\n         <Route exact path={`${match.path}`} component={CollectionsOverview} />\n         <Route\n            path={`${match.path}/:collectionId`}\n            component={CollectionPage}\n         />\n      </main>\n   );\n};\n\nShopPage.propTypes = {\n   match: PropTypes.object.isRequired,\n   updateCollections: PropTypes.func.isRequired\n};\n\nconst mapDispatchToProps = dispatch => ({\n   updateCollections: collectionsMap =>\n      dispatch(updateCollections(collectionsMap))\n});\n\nexport default connect(null, mapDispatchToProps)(ShopPage);\n"]},"metadata":{},"sourceType":"module"}